reference tracking for graphs
runtime instrumentation
where did a graph come from
tuples
records
lambda types
circular reference finder
low-level debugger with graph step-through
value_or_graph and atom should be merged
compiler error handling with line/char #
dagc source maps
cascading polymorphic functions for typeclasses
input nodes shouldn't have required_type, it should be taken from graph type
closures
interface files

ideas
==

are records just scopes, where assignments in the scope build the record?
that could be kind of cool. so this:

Entity {
    : id = 81
    : name = "a thing"
    : transform = \x -> + 8 x
}

Is equivalent to Entity 81 "a thing" (\x -> + 8 x)
