/*
 * token.l: expel language tokenizer
 * Copyright (C) 2016, Haldean Brown
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%{
#include "expel/token.h"

/* these are generated by generated code, and they're innocuous, so we
 * suppress them. */
#pragma GCC diagnostic ignored "-Wunused-parameter"

%}

%option reentrant
%option noyywrap
%option yylineno
%option nounput
%option noinput

%%

\n
[ ]
[0-9]+\.[0-9]+          return TOKEN_NUMBER;
[a-zA-Z0-9/_\-]+        return TOKEN_NAME;

%%

no_ignore xl_error
xl_tokenize(xl_token_cb callback, struct xl_stream *stream)
{
        struct xl_token token;
        yyscan_t scanner;
        xl_error err;
        int flex_ret;

        err = OK;

        flex_ret = yylex_init(&scanner);
        if (flex_ret != 0)
                return xl_raise(ERR_BAD_VALUE, "yylex_init failed");

        yyset_in(xl_stream_fp(stream), scanner);

        while ((token.token_code = yylex(scanner)) > 0)
        {
                token.text = yyget_text(scanner);
                token.text_len = yyget_leng(scanner);
                token.line_no = yyget_lineno(scanner);
                err = callback(token);
                if (err != OK)
                        goto exit;
        }

exit:
        yylex_destroy(scanner);
        return err;
}
