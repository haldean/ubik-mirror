/*
 * token.l: expel language tokenizer
 * Copyright (C) 2016, Haldean Brown
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%{

#include "expel/token.h"
#include "grammar.tab.h"

/* these are generated by generated code, and they're innocuous, so we
 * suppress them. */
#pragma GCC diagnostic ignored "-Wunused-parameter"

#define ERROR 0x0FFFFFFF

#define TOKEN(x) { yylval->token = x; return x; }
#define STRING(token) { \
        yylval->string = strdup(yytext); \
        return token; \
}

%}

%option reentrant
%option noyywrap
%option yylineno
%option nounput
%option noinput
%option bison-bridge

%%

\n
[ ]
"!"                             TOKEN(IMMEDIATE);
":"                             TOKEN(BIND)
"^"                             TOKEN(TYPE)
"=>"                            TOKEN(IMPLIES)
"->"                            TOKEN(GOES_TO)
"\\"                            TOKEN(LAMBDA)
"="                             TOKEN(IS)
"("                             TOKEN(OPEN_PAR)
")"                             TOKEN(CLOSE_PAR)
[0-9]+                          { yylval->integer = atoi(yytext); return INTEGER; }
([0-9]+\.[0-9]*|\.[0-9]+)       { yylval->floating = atof(yytext); return NUMBER; }
[a-z_][a-zA-Z0-9/_\-']*         STRING(NAME)
[A-Z][a-zA-Z0-9/']*             STRING(TYPE_NAME)

.                               return ERROR;

%%

no_ignore xl_error
xl_tokenize(xl_token_cb callback, struct xl_stream *stream)
{
        struct xl_token token;
        yyscan_t scanner;
        xl_error err;
        int ret;
        char *err_msg;
        YYSTYPE token_info;

        err = OK;

        ret = yylex_init(&scanner);
        if (ret != 0)
                return xl_raise(ERR_UNEXPECTED_FAILURE, "yylex_init failed");

        yyset_in(xl_stream_fp(stream), scanner);

        while ((token.token_code = yylex(&token_info, scanner)) > 0)
        {
                token.text = yyget_text(scanner);
                token.text_len = yyget_leng(scanner);
                token.line_no = yyget_lineno(scanner);
                if (token.token_code == ERROR)
                {
                        ret = asprintf(
                                &err_msg,
                                "unexpected character '%c' on line %d",
                                token.text[0], token.line_no);
                        if (ret < 0)
                                err_msg = "unexpected character in parse";
                        return xl_raise(ERR_BAD_VALUE, err_msg);
                }
                err = callback(token);
                if (err != OK)
                        goto exit;
        }

exit:
        yylex_destroy(scanner);
        return err;
}
