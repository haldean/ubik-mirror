~ ubik-tests/pokemon
` *list
` math

^ IV = Good = Bad

^ Bag
    = BagC Number Number

    # accessors for members, to give them names
    : n ^ Bag -> Number = \x -> ? x { . BagC n * => n }
    : good ^ Bag -> Number = \x -> ? x { . BagC * good => good }

    # make new bags with a good or a bad value removed
    : sub-good ^ Bag -> Bag
        = \x -> BagC (- (n x) 1) (- (good x) 1)
    : sub-bad ^ Bag -> Bag
        = \x -> BagC (- (n x) 1) (good x)

# this should be a tuple...
^ TreePair = TreePairC IV Tree
    : tree ^ TreePair -> Tree = \tp -> ? tp { . TreePairC * t => t }

# ...and this should be an alias
^ Tree = TreeC (List TreePair)
    # accessor for children
    : children ^ Tree -> List TreePair = \tree -> ? tree { . TreeC l => l }

    # create a tree by choosing k IVs out of bag b
    : make ^ Number -> Bag -> Tree
        = \k b -> ? {
            . eq k 0 => TreeC Nil
            . => TreeC ({
                : ivs = map (\num -> ? {
                        . math:lt num (good b) => Good
                        . => Bad
                    }) (range 0 (n b))
                ! map (\iv -> ? iv {
                    . Good => TreePairC Good (make (- k 1) (sub-good b))
                    . Bad  => TreePairC Bad  (make (- k 1) (sub-bad b))
                }) ivs
            })
        }
    ?: make 0 (BagC 1 1) = TreeC Nil
    ?: make 1 (BagC 1 1) = TreeC (Cons (TreePairC Good (TreeC Nil)) Nil)
    ?: make 1 (BagC 2 1) = TreeC (Cons (TreePairC Good (TreeC Nil))
                                 (Cons (TreePairC Bad  (TreeC Nil)) Nil))

    # the probability that you would get i good IVs when drawing from the tree.
    : prob ^ Tree -> Number -> Number
        = \tree i -> {
            : c = children tree
            : nc = length c
            ! (? c {
                . Nil => ? { . eq i 0 => 1 . => 0 }
                . Cons * * =>
                    reduce + 0 (map
                        (\child -> * (/ 1 nc) (prob (tree child) (? child {
                            . TreePairC * iv => ? iv {
                                . Good => (- i 1)
                                . Bad => i
                            }
                        })))
                        c)
            })
        }

! {
    : t = make 2 (BagC 2 1)
    ! emit (humanize (prob t 1))
}
