~ list
` *boolean

^ List a
    = Cons a (List a)
    = Nil

: append
    ^ List a -> a -> List a
    = \lst x -> ? lst {
        . Cons head tail => Cons head (append tail x)
        . Nil => Cons x Nil
    }
?: (append 5 Nil) (Cons 5 Nil)
?: (append Nil Nil) (Cons Nil Nil)
?: (append 5 (Cons 3 (Cons 8 Nil)) (Cons 3 (Cons 8 (Cons 5 Nil)))

: contains
    ^ List a -> a -> Boolean
    = \lst x -> ? lst {
        . Cons head tail => (? {
            . eq head x => true
            .           => contains tail x
        })
        . Nil => false
    }
?: (contains (Cons "a" (Cons "hello" (Cons "world" Nil))) "hello") true
?: (contains (Cons "a" (Cons "hello" (Cons "world" Nil))) "foobar") false
?: (contains Nil "nope") false
?: (contains Nil Nil) false

: humanize-list
    ^ List a -> String
    = \lst -> {
        : rec = \x -> ? x {
            . Cons a xs => (
                concat (concat " " (humanize a)) (rec xs))
            . Nil => " "
        }
        ! concat "[" (concat (rec lst) "]")
    }
?: (humanize-list (range 0 4)) "[ 0 1 2 3 ]"
?: (humanize-list Nil) "[ ]"

: range
    ^ Number -> Number -> List Number
    = \start end -> ? {
        . eq start end => Nil
        . => Cons start (range (+ start 1) end)
    }
?: (range 0 3) (Cons 0 (Cons 1 (Cons 2 Nil)))
?: (range 100 150) Nil

: any
    ^ List Boolean -> Boolean
    = \l -> ? l {
        . Nil => false
        . Cons head tail => (? {
            . head => true
            . => any tail
        })
    }
?: (any [true false false]) true
?: (any [false false false]) false
