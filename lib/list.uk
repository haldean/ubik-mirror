~ list
` *boolean
` math

^ List a
    = Cons a (List a)
    = Nil

: append
    ^ List a -> a -> List a
    = \lst x -> ? lst {
        . Cons head tail => Cons head (append tail x)
        . Nil => Cons x Nil
    }
?: append Nil 5 = Cons 5 Nil
?: append Nil Nil = Cons Nil Nil
?: append (Cons 3 (Cons 8 Nil)) 5 = Cons 3 (Cons 8 (Cons 5 Nil))

: contains
    ^ List a -> a -> Boolean
    = \lst x -> ? lst {
        . Cons head tail => (? {
            . eq head x => true
            .           => contains tail x
        })
        . Nil => false
    }
?: contains (Cons "a" (Cons "hello" (Cons "world" Nil))) "hello" = true
?: contains (Cons "a" (Cons "hello" (Cons "world" Nil))) "foobar" = false
?: contains Nil "nope" = false
?: contains Nil Nil = false

: humanize-list
    ^ List a -> String
    = \lst -> {
        : rec = \x -> ? x {
            . Cons a xs => (
                concat (concat " " (humanize a)) (rec xs))
            . Nil => " "
        }
        ! concat "[" (concat (rec lst) "]")
    }
?: humanize-list (range 0 4) = "[ 0 1 2 3 ]"
?: humanize-list Nil = "[ ]"

: range
    ^ Number -> Number -> List Number
    = \start end -> ? {
        . math:gte start end => Nil
        . => Cons start (range (+ start 1) end)
    }
?: range 0 3 = Cons 0 (Cons 1 (Cons 2 Nil))
?: range 150 150 = Nil
?: range 151 150 = Nil

: any
    ^ List Boolean -> Boolean
    = \l -> ? l {
        . Nil => false
        . Cons head tail => (? {
            . head => true
            . => any tail
        })
    }
?: any (Cons true (Cons false (Cons false Nil))) = true
?: any (Cons false (Cons false (Cons false Nil))) = false
?: any Nil = false

: all
    ^ List Boolean -> Boolean
    = \l -> ? l {
        . Nil => true
        . Cons head tail => (? {
            . head => all tail
            . => false
        })
    }
?: all (Cons true (Cons false Nil)) = false
?: all (Cons true (Cons true Nil)) = true
?: all Nil = true

: map
    ^ (a -> b) -> List a -> List b
    = \f l -> ? l {
        . Nil => Nil
        . Cons head tail => Cons (f head) (map f tail)
    }
?: map (* 2) (range 0 3) = Cons 0 (Cons 2 (Cons 4 Nil))

: filter
    ^ (a -> Boolean) -> List a -> List a
    = \f l -> ? l {
        . Nil => Nil
        . Cons head tail => ? {
            . f head => Cons head (filter f tail)
            .        => filter f tail
        }
    }
