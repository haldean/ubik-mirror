/*
 * token.l: ubik language tokenizer
 * Copyright (C) 2016, Haldean Brown
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

%{

#include "ubik/ast.h"
#include "ubik/token.h"
#include "ubik/parse.h"
#include "grammar.h"

/* these are generated by generated code, and they're innocuous, so we
 * suppress them. */
#pragma GCC diagnostic ignored "-Wunused-parameter"
/* this is less innocuous, but there's not much I can do about it. */
#pragma GCC diagnostic ignored "-Wsign-compare"

#define TOKEN(x) { yylval->token = x; return x; }
#define TSTRING(token) { \
        yylval->string = strdup(yytext); \
        if (ubik_vector_append(&ctx->allocs, yylval->string) != OK) return 0; \
        return token; \
}

#define YY_USER_ACTION do { \
        yyget_lloc(yyscanner)->first_line = yyget_lloc(yyscanner)->last_line = yylineno; \
        yyget_lloc(yyscanner)->first_column = yycolumn; \
        yyget_lloc(yyscanner)->last_column = yycolumn + yyleng - 1; \
        yycolumn += yyleng; } while (0);

char *read_string_literal(struct ubik_parse_context *ctx, yyscan_t scanner);

%}

%option reentrant
%option noyywrap
%option yylineno
%option nounput
%option bison-bridge
%option bison-locations

NAME [a-z_][a-zA-Z0-9/_\-']*

%%

\n
[ ]

#.*                       /* swallow comments */

"!"                       TOKEN(IMMEDIATE);
":"                       TOKEN(BIND)
"^"                       TOKEN(TYPE)
"=>"                      TOKEN(IMPLIES)
"/>"                      TOKEN(OPPOSES)
"->"                      TOKEN(GOES_TO)
"\\"                      TOKEN(LAMBDA)
"="                       TOKEN(IS)
"("                       TOKEN(OPEN_PAR)
")"                       TOKEN(CLOSE_PAR)
"+"                       TOKEN(USES)
"\."                      TOKEN(MEMBER)
"{"                       TOKEN(OPEN_SCOPE)
"}"                       TOKEN(CLOSE_SCOPE)
"|"                       TOKEN(GIVEN)
"'"                       TOKEN(EXISTS)
"?"                       TOKEN(COND)
[0-9]+                    { yylval->integer = atoi(yytext); return INTEGER; }
([0-9]+\.[0-9]*|\.[0-9]+) { yylval->floating = atof(yytext); return NUMBER; }
{NAME}                    TSTRING(NAME)
{NAME}:{NAME}             TSTRING(QUALIFIED_NAME)
[A-Z][a-zA-Z0-9/']*       TSTRING(TYPE_NAME)
"\""                      { yylval->string = read_string_literal(ctx, yyscanner);
                            return STRING; }

.                         { printf("%d: invalid character %s\n",
                                   yylineno, yytext);
                            return yytext[0]; }


%%

char *
read_string_literal(struct ubik_parse_context *ctx, yyscan_t scanner)
{
        char *res;
        char *temp;
        char last;
        char this;
        size_t n;
        size_t cap;

        n = 0;
        cap = 32;
        res = calloc(cap, sizeof(char));
        last = '\0';
        this = '\0';

        for (;;)
        {
                this = input(scanner);
                if (this == '"' && last != '\\')
                        break;

                if (last == '\\')
                {
                        if (this == 'n')
                        {
                                res[n - 1] = '\n';
                                last = this;
                                continue;
                        }
                        if (this == 'r')
                        {
                                res[n - 1] = '\r';
                                last = this;
                                continue;
                        }
                        if (this == 't')
                        {
                                res[n - 1] = '\t';
                                last = this;
                                continue;
                        }
                }

                if (n == cap)
                {
                        cap *= 2;
                        temp = realloc(res, cap);
                        if (temp == NULL)
                        {
                                free(res);
                                return NULL;
                        }
                        bzero(&temp[n], cap - n);
                        res = temp;
                }
                res[n++] = this;
                last = this;
        }

        temp = realloc(res, n + 1);
        if (temp == NULL)
        {
                free(res);
                return NULL;
        }
        if (ubik_vector_append(&ctx->allocs, temp) != OK)
        {
                free(temp);
                return NULL;
        }
        return temp;
}
