Recursive closures =====================================================
Haldean Brown                                      First draft: Nov 2016
                                                  Last updated: Nov 2016

Status: Complete

------------------------------------------------------------------------

The closure transformation turns closures into partially-applied
functions, by turning values that have been closed over into arguments
to the function itself. The specific algorithm for doing this is
detailed greatly in the header closure.c, but the general gist is that:

It transforms this:
    \x -> (\y -> + x y)
To this:
    \x -> ((\x0 y -> + x0 y) x)

It transforms this:
    \x -> (\y -> (\z -> x))
Into this:
    \x -> ((\x0 y -> ((\x1 z -> x1) x0)) x)

It transforms this:
    \x -> {
        : y = + x 10
        ! \z -> y
    }
Into this:
    \x -> {
        : y = + x 10
        ! (\y0 z -> y0) y
    }

This closes these functions over the enclosing scope by making all
enclosing scope information an explicit argument to the function, and
then partially applying the function over that information.

This document describes how the closure transformation interacts with
recursion for values that are not bound to a global name. For example,
this snippet:

    ! {
        : t = \x -> ? {
            . eq x 0 => "ok\n"
            . => t 0
        }
        ! t 1
    }

In this example, the closure transformation should take t and turn it
into this:

        : t = (\t x -> ? {
            . eq x 0 => "ok\n"
            . => t 0
        }) t

But now we find ourselves referencing t before we've defined it, and we
can quickly get into a circular reference. Here, we transform t into a
top-level anonymous function with its own value:

    : anonymous-t =
        \t x -> ? {
            . eq x 0 => "ok\n"
            . => t 0
        }

    ! {
        : t = anonymous-t anonymous-t
        ! t 1
    }

In so doing, we can fully define anonymous-t without any
self-references, and ditto with t. Note that in the actual
implementation of this feature, anonymous-t does not have a name in the
global namespace; it is fully anonymous and is only defined by its
value.

In order to accomplish this, the closure transformation code marks the
application of the function to itself as the application of a recursion
parameter, but otherwise performs the closure transformation normally.
In the above example, this then becomes:

        : t = (\t x -> ? {
            . eq x 0 => "ok\n"
            . => t 0
        }) *t

With the asterisk here being shorthand for is-recursive-parameter. Then,
in the code-generation stage, when the code generation visitor sees an
apply statement with a recursion parameter, it transforms:

        (f *f)

Into a new top-level value inserted into the workspace and a reference
to that value, replacing the recursion parameter with a reference to the
same value.

        &f = f
        ((const &f) (const &f))

The closure transformation is maintained on f, allowing it to
self-recurse without any self-references.

This gets a little more complicated when there are multiple closed
parameters being applied. Take this useless function as an example:

        {
            : x = 8
            : f = \y -> f x
        }

Both of these would be valid closure transformations for f:

        : f = (\f x y -> f x) *f x
        : f = (\x f y -> f x) x *f

And their associated recusion transformations are:

        : anonymous-f = \f x y -> f x
        : f = anonymous-f anonymous-f x

        : anonymous-f = \x f y -> f x
        : f = anonymous-f x anonymous-f

There are no statements here that look exactly like our (f *f) pattern
above, though, in the example where f is not the first closure
parameter. We end up with:

        ((f x) *f)

And (f x) isn't extractable, because x is local. To get around this, the
code generation stage needs to examine the full apply tree to check if
an apply chain contains a recursion parameter, and if it does, it needs
to extract the leftmost function value into its own top-level value.

Note that top level bindings do not need this transformation, because
they can reference themselves by name. So this function at the top
level:

        ~ p
        : f = \t -> f 0

Gets turned into the following pseudo-bytecode:

        000 INPUT 0
        001 LOAD "p:f"
        002 CONST 0
        003 APPLY 001 002

and the LOAD breaks the cycle.
